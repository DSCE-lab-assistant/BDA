Steps to be followed:

• Step-1: Open Eclipse -> then select File -> New -> Java Project -> Name
it WordCount -> then Finish.

• Step-2: Create Three Java Classes into the project.
File -> New -> Class
Name them WCDriver (having the main function), WCMapper and
WCReducer.

• Step-3: You have to include two Reference Libraries,
Right Click on src of Project -> then select Build Path -> Click on Configure Build Path -> Libraries ->Add External JARs -> hadoop -> Training -> CDH4 ->
hadoop-2.0.0-cdh4.0.0-> share -> hadoop -> common -> hadoop-common(1st jar file) -> ok
Add External JARs -> hadoop -> Training -> CDH4 ->
hadoop-2.0.0-cdh4.0.0-> share -> hadoop -> mapreduce -> hadoop-mapreduce(3rd jar file) -> ok
Press ok

Step-4: Mapper Code which should be copied and pasted into the WCMapper
Java Class file.
// Importing libraries
import java.io.IOException;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.mapreduce.Mapper;

public class WCMapper extends Mapper<LongWritable, Text, Text, IntWritable > {

	public void map(LongWritable key, Text value, Context context)
			throws IOException, InterruptedException {
		
			String line=value.toString();
			// Splitting the line on spaces
			for (String word : line.split(" "))
			{
				if (word.length() > 0)
				{
				context.write(new Text(word), new IntWritable(1));
				}
			}
		}
	}

• Step-5: Reducer Code which should be copied and pasted into the WCReducer
Java Class file.
// Importing libraries
import java.io.IOException;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.mapreduce.Reducer;

// Reduce function
public class WCReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
public void reduce(Text key, Iterable<IntWritable> values, Context context)
			throws IOException, InterruptedException {
		int maxvalue=Integer.MIN_VALUE;
		for (IntWritable value : values) {
maxvalue=Math.max(maxvalue, value.get());
		}
		context.write(key, new IntWritable(maxvalue));
	}

}

• Step-6: Driver Code which should be copied and pasted into the WCDriver Java
Class file.
// Importing libraries
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class WCDriver {

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "WCDriver");
		job.setJarByClass(WCDriver.class);
		// TODO: specify a mapper
		job.setMapperClass(WCMapper.class);
		// TODO: specify a reducer
		job.setReducerClass(WCReducer.class);

		// TODO: specify output types
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);

		// TODO: specify input and output DIRECTORIES (not files)
		FileInputFormat.setInputPaths(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));

		if (!job.waitForCompletion(true))
			return;
	}

}

Step-7: Now you have to make a jar file.
Right Click on Project -> Click on Export -> Select export destination as Jar
File -> Name the jar File (WordCount.jar) -> Click on next -> at last Click on
Finish.

Step-8: Open the terminal
Now, Create a text file (WCFile.txt) and move it to HDFS.

    vi WCFile.text

• Step-9: Now, run the below command to copy the file input file into the HDFS,

    hadoop fs -put WCFile.txt WCFile.txt

• Step-10: Now to run the jar file, execute the below code,

    hadoop jar wordcount.jar WCDriver WCFile.txt WCOutput

• Step-11: After Executing the code, you can see the result in WCOutput file or by
writing following command on terminal,

    hadoop fs -cat WCOutput/part-r-00000
